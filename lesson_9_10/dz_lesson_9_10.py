# Оцінюються:
# Задача 1
# 1) Напишіть 10 тестів(можна що б просто повертали Тру(щоб проходили)) імена тестів повині йти підряд
# test_1, test_2 ... . Повішайти на них три декоратора old, main, new. кожен декоратор повинен бути на 3 функціях
# на одній з функцій повино бути повішано два декоратора old i main.
# додайти їх в python.ini що б були правильні виводи
#
# Зробіть такі прогони
# 1) всі тексти де немає лейби old
# 2) тест де пересікаються old i main.
# 3) тести з маркерами main, new
# З домашкою здайте скріншоти з прогонами, на скріншотах повино бути
# видно який саме тест прогнався(використовуйте прапор verbose).
#
# Задача 2
# Візьміть задачу з минулого уроку(
# 3) зробіть функцію як ми робили з додаванням тільки замість двох чисел зробіть три числа і протестуйте її всіма трьома методами
# ) модернізуйте її так що кожний раз коли ми її запускаємо те що ми туди передаєм та результат повинно записуватись в файл log.txt
# Зверніть увагу на те що в файл повинно дозаписуватись, а не затератись.
# Уявіть що ця функція являється легасі кодом і ви її не можете змінювати,
# тому потрібно використовувати декоратор. Я хотів би бачити таку реалізацію в домашці три функції:
# функція з минулого уроку
# функція що записую текст
# і декоратор
#
#
# Не оцінюється
# Напишіть рекурсивну функцію яка приймає число і повертає добуток всіх чисел якщо віднімати мінус
# 1. тобто якщо передати в функцію 4 то в нас буде 4+3+2+1 = 10.

# Задача 2


def dec_write(add_numbers):
    def write_def(num_1, num_2, num_3):
        with open("log.txt", "a") as file:
            file.write("\n")
            file.write(f"var_1 = {num_1}, var_2 = {num_2}, var_3 = {num_3}")

        result = add_numbers(num_1, num_2, num_3)
        with open("log.txt", "a") as file:
            file.write(f" result = {result}")

        return result

    return write_def


@dec_write
def add_numbers(num_1: int | float, num_2: int | float, num_3: int | float) -> int | float:
    add_result = num_1 + num_2 + num_3
    # write_def(num_1, num_2, num_3, add_result)
    return add_result

# def write_def(num_1, num_2, num_3, add_result):
#     with open("log.txt", "a") as file:
#         file.write("\n")
#         file.write(f"var1 = {num_1},var2={num_2}, var3 = {num_3}, result = {add_result}")


# add_numbers(1, 2, 3)
